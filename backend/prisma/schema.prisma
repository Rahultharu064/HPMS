generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model amenity {
  id     Int    @id @default(autoincrement())
  name   String
  roomId Int
  room   room   @relation(fields: [roomId], references: [id], map: "Amenity_roomId_fkey")

  @@index([roomId], map: "Amenity_roomId_fkey")
}

model image {
  id     Int    @id @default(autoincrement())
  name   String
  size   Int
  type   String
  url    String  @default("")
  roomId Int
  room   room   @relation(fields: [roomId], references: [id], map: "Image_roomId_fkey")

  @@index([roomId], map: "Image_roomId_fkey")
}

model room {
  id            Int       @id @default(autoincrement())
  name          String
  roomType      String
  roomNumber    String    @unique(map: "Room_roomNumber_key")
  floor         Int
  price         Float
  size          Float
  maxAdults     Int
  maxChildren   Int       @default(0)
  numBeds       Int
  description   String
  allowChildren Boolean   @default(false)
  status        String    @default("available")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  amenity       amenity[]
  image         image[]
  video         video[]
  bookings      booking[]
}

model video {
  id     Int    @id @default(autoincrement())
  name   String
  size   Int
  type   String
  url    String  @default("")
  roomId Int
  room   room   @relation(fields: [roomId], references: [id], map: "Video_roomId_fkey")

  @@index([roomId], map: "Video_roomId_fkey")
}

model guest {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique(map: "Guest_email_key")
  phone     String    @unique(map: "Guest_phone_key")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  // Extended profile fields
  nationality String?   @db.VarChar(191)
  idType      String?   @db.VarChar(191)
  idNumber    String?   @db.VarChar(191)
  address     String?   @db.VarChar(512)
  photoUrl    String    @default("")
  vip         Boolean   @default(false)
  loyaltyLevel String   @default("silver")
  notes       String?   @db.Text

  bookings  booking[]
}

model booking {
  id          Int       @id @default(autoincrement())
  guestId     Int
  roomId      Int
  checkIn     DateTime
  checkOut    DateTime
  adults      Int
  children    Int       @default(0)
  totalAmount Float
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  guest       guest     @relation(fields: [guestId], references: [id], map: "Booking_guestId_fkey")
  room        room      @relation(fields: [roomId], references: [id], map: "Booking_roomId_fkey")
  payments    payment[]

  @@index([guestId], map: "Booking_guestId_fkey")
  @@index([roomId], map: "Booking_roomId_fkey")
}

model payment {
  id        Int       @id @default(autoincrement())
  bookingId Int
  method    String
  amount    Float
  status    String    @default("pending")
  createdAt DateTime  @default(now())

  booking   booking   @relation(fields: [bookingId], references: [id], map: "Payment_bookingId_fkey")

  @@index([bookingId], map: "Payment_bookingId_fkey")
}


