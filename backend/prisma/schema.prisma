generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Restored from migrations to match existing application models
model Room {
  id            Int      @id @default(autoincrement())
  name          String
  roomType      String
  roomNumber    String   @unique
  floor         Int
  price         Float
  size          Float
  maxAdults     Int
  maxChildren   Int      @default(0)
  numBeds       Int
  description   String   @db.Text
  allowChildren Boolean  @default(false)
  status        String   @default("available")
  createdAt     DateTime @default(now())
  updatedAt     DateTime

  amenity            Amenity[]
  image              Image[]
  video              Video[]
  bookings           Booking[]
  reviews            Review[]
  // Back-relations for housekeeping and related models
  hkTasks            HkTask[]
  cleaningLogs       CleaningLog[]
  inspections        Inspection[]
  guestRequests      GuestRequest[]
  maintenanceTickets MaintenanceTicket[]
  inventoryTxns      InventoryTxn[]
  lostFound          LostFound[]

  @@map("Room")
}

model Amenity {
  id     Int    @id @default(autoincrement())
  name   String
  roomId Int

  room Room @relation(fields: [roomId], references: [id])

  @@map("Amenity")
}

model Image {
  id     Int    @id @default(autoincrement())
  name   String
  size   Int
  type   String
  roomId Int
  url    String @default("")

  room Room @relation(fields: [roomId], references: [id])

  @@map("Image")
}

model Video {
  id     Int    @id @default(autoincrement())
  name   String
  size   Int
  type   String
  roomId Int
  url    String @default("")

  room Room @relation(fields: [roomId], references: [id])

  @@map("Video")
}

// =====================
// Facility Models
// =====================

model Facility {
  id           Int       @id @default(autoincrement())
  name         String
  slug         String    @unique
  description  String    @db.Text
  status       String    @default("open")
  openingHours String?
  category     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  images FacilityImage[]
  videos FacilityVideo[]

  @@map("facility")
}

model FacilityImage {
  id         Int      @id @default(autoincrement())
  facilityId Int
  name       String
  size       Int
  type       String
  url        String   @default("")
  order      Int      @default(0)

  facility Facility @relation(fields: [facilityId], references: [id])

  @@index([facilityId])
  @@map("facility_image")
}

model FacilityVideo {
  id         Int      @id @default(autoincrement())
  facilityId Int
  name       String
  size       Int
  type       String
  url        String   @default("")
  order      Int      @default(0)

  facility Facility @relation(fields: [facilityId], references: [id])

  @@index([facilityId])
  @@map("facility_video")
}

model Review {
  id        Int      @id @default(autoincrement())
  roomId    Int
  name      String
  rating    Float
  comment   String   @db.Text
  createdAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id])

  @@index([roomId])
  @@map("review")
}

// App models used throughout controllers
model Guest {
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String    @unique
  phone         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  dateOfBirth   DateTime?
  modeOfArrival String?
  photoUrl      String?
  loyaltyLevel  String?
  vip           Boolean?

  bookings Booking[]

  @@map("guest")
}

model Booking {
  id          Int      @id @default(autoincrement())
  guestId     Int
  roomId      Int
  checkIn     DateTime
  checkOut    DateTime
  adults      Int
  children    Int      @default(0)
  totalAmount Float
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  source      String   @default("offline")

  guest        Guest          @relation(fields: [guestId], references: [id])
  room         Room           @relation(fields: [roomId], references: [id])
  payments     Payment[]
  HkTask       HkTask[]
  GuestRequest GuestRequest[]

  @@map("booking")
}

model Payment {
  id        Int      @id @default(autoincrement())
  bookingId Int
  method    String
  amount    Float
  status    String   @default("pending")
  createdAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("payment")
}

// Logs for OTA sync/import operations
model OtaSyncLog {
  id             Int      @id @default(autoincrement())
  provider       String
  direction      String // push | pull | webhook
  status         String // success | failed | queued
  message        String?
  payloadSnippet String?  @db.Text
  createdAt      DateTime @default(now())
  jobId          String?
  durationMs     Int?
  errorStack     String?  @db.Text

  @@index([createdAt])
  @@map("ota_sync_log")
}

// Idempotency for external OTA bookings
model ExternalBooking {
  id         Int      @id @default(autoincrement())
  provider   String
  externalId String
  createdAt  DateTime @default(now())
  note       String?

  @@unique([provider, externalId])
  @@map("external_booking")
}

// =====================
// Housekeeping Enums
// =====================

enum HkTaskStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  DONE
  QA_CHECK
  CLOSED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RequestStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  DONE
  CANCELLED
}

enum MaintenanceStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Severity {
  MINOR
  MAJOR
  CRITICAL
}

enum InspectionStatus {
  PENDING
  PASSED
  FAILED
}

// =====================
// Housekeeping Models
// =====================

model HkTask {
  id          Int          @id @default(autoincrement())
  roomId      Int
  bookingId   Int?
  type        String
  title       String
  description String?
  priority    Priority     @default(MEDIUM)
  status      HkTaskStatus @default(NEW)
  assignedTo  String?
  dueAt       DateTime?
  checklist   Json?
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())

  room         Room               @relation(fields: [roomId], references: [id])
  booking      Booking?           @relation(fields: [bookingId], references: [id])
  attachments  HkTaskAttachment[]
  CleaningLog  CleaningLog[]
  InventoryTxn InventoryTxn[]

  @@index([roomId])
  @@index([status, priority])
  @@map("hk_task")
}

model HkTaskAttachment {
  id        Int      @id @default(autoincrement())
  taskId    Int
  fileUrl   String
  fileType  String
  createdAt DateTime @default(now())

  task HkTask @relation(fields: [taskId], references: [id])

  @@index([taskId])
  @@map("hk_task_attachment")
}

model CleaningLog {
  id          Int       @id @default(autoincrement())
  roomId      Int
  taskId      Int?
  startedAt   DateTime
  finishedAt  DateTime?
  durationMin Int?
  byUser      String?
  outcome     String?
  notes       String?

  room Room    @relation(fields: [roomId], references: [id])
  task HkTask? @relation(fields: [taskId], references: [id])

  @@index([roomId])
  @@map("cleaning_log")
}

model InventoryItem {
  id           Int      @id @default(autoincrement())
  name         String
  sku          String?  @unique
  unit         String
  stock        Int      @default(0)
  reorderLevel Int      @default(0)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  transactions InventoryTxn[]

  @@index([active])
  @@map("inventory_item")
}

model InventoryTxn {
  id        Int      @id @default(autoincrement())
  itemId    Int
  qty       Int
  direction String
  roomId    Int?
  taskId    Int?
  note      String?
  createdAt DateTime @default(now())

  item InventoryItem @relation(fields: [itemId], references: [id])
  room Room?         @relation(fields: [roomId], references: [id])
  task HkTask?       @relation(fields: [taskId], references: [id])

  @@index([itemId])
  @@map("inventory_txn")
}

model GuestRequest {
  id          Int           @id @default(autoincrement())
  bookingId   Int?
  roomId      Int?
  requestType String
  priority    Priority      @default(MEDIUM)
  status      RequestStatus @default(OPEN)
  assignedTo  String?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())

  booking Booking? @relation(fields: [bookingId], references: [id])
  room    Room?    @relation(fields: [roomId], references: [id])

  @@index([status, priority])
  @@map("guest_request")
}

model LostFound {
  id          Int      @id @default(autoincrement())
  roomId      Int?
  foundAt     DateTime @default(now())
  description String
  photoUrl    String?
  status      String   @default("logged")
  returnedTo  String?
  receivedBy  String?
  notes       String?

  room Room? @relation(fields: [roomId], references: [id])

  @@index([status])
  @@map("lost_found")
}

model MaintenanceTicket {
  id         Int               @id @default(autoincrement())
  roomId     Int?
  issueType  String
  severity   Severity          @default(MINOR)
  status     MaintenanceStatus @default(OPEN)
  assignedTo String?
  notes      String?
  openedAt   DateTime          @default(now())
  closedAt   DateTime?

  room Room? @relation(fields: [roomId], references: [id])

  @@index([status, severity])
  @@map("maintenance_ticket")
}

model Inspection {
  id           Int              @id @default(autoincrement())
  roomId       Int
  scheduleType String
  checklist    Json?
  status       InspectionStatus @default(PENDING)
  performedAt  DateTime?
  performedBy  String?

  room Room @relation(fields: [roomId], references: [id])

  @@index([roomId, status])
  @@map("inspection")
}
